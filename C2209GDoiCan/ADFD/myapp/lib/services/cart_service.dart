import 'dart:async';
import 'dart:convert';
import 'package:http/http.dart' as http;
import 'package:myapp/dtos/responses/cart.dart';
import 'package:myapp/dtos/responses/cart_checkout.dart';
import 'base_service.dart';

class CartService extends BaseService {
  CartService({required super.baseURL, required super.httpClient});

  /// üîπ **G·ªçi API t·∫°o gi·ªè h√†ng**
  Future<CartResponse> createCart({int? userId, String? sessionId, String? token}) async {
    if ((userId == null && sessionId == null) || (userId != null && sessionId != null)) {
      throw ArgumentError("Ph·∫£i c√≥ m·ªôt trong hai user_id ho·∫∑c session_id, nh∆∞ng kh√¥ng ƒë∆∞·ª£c c·∫£ hai.");
    }

    final response = await request(
      endpoint: 'carts',
      method: HttpMethod.POST,
      requestData: {
        if (userId != null) 'user_id': userId,
        if (sessionId != null) 'session_id': sessionId,
      },
      token: userId != null ? token : null, // N·∫øu c√≥ user_id th√¨ truy·ªÅn token
    );

    // Chuy·ªÉn ƒë·ªïi response th√†nh ƒë·ªëi t∆∞·ª£ng CartResponse
    return CartResponse.fromJson(response.data);
  }

  Future<CartCheckoutResponse> checkoutCart({
    required int cartId,
    required String phone,
    required String address,
    String? note,
    String? token, // N·∫øu c√≥ user ƒëƒÉng nh·∫≠p th√¨ truy·ªÅn token
  }) async {
    if (cartId <= 0 || phone.isEmpty || address.isEmpty) {
      throw ArgumentError("Thi·∫øu th√¥ng tin b·∫Øt bu·ªôc: cartId, phone ho·∫∑c address kh√¥ng h·ª£p l·ªá.");
    }

    final response = await request(
      endpoint: 'carts/checkout',
      method: HttpMethod.POST,
      requestData: {
        'cart_id': cartId,
        'phone': phone,
        'address': address,
        if (note != null) 'note': note,
      },
      token: token,
    );

    // Chuy·ªÉn ƒë·ªïi response th√†nh ƒë·ªëi t∆∞·ª£ng CartCheckoutResponse
    return CartCheckoutResponse.fromJson(response.data);
  }

}
